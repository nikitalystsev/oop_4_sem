#pragma once

#include <cstddef> // size_t

//    Aбстрактный класс, на основе которого будут определяться производные классы.
//    Класс, содержащий чисто виртуальные функции, называется абстрактным классом.
//    Объекты абстрактных классов не могут быть созданы напрямую,
//    но они могут быть использованы как интерфейсы для производных классов,
//    которые должны предоставить реализацию этих чисто виртуальных функций.
class MatrixBase {
public:
    // конструктор класса
    MatrixBase(size_t rows = 0, size_t columns = 0) : _rows(rows), _cols(columns) {}

    // виртуальные методы, которые могут быть переопределены в производных классах.
    virtual size_t get_columns() const

    noexcept { return _cols; };

    virtual size_t get_rows() const

    noexcept { return _rows; };

    // оператор приведения типа к bool
//    Этот оператор позволяет использовать объекты этого класса в логических выражениях,
//    например, как условие в операторе if.
    virtual operator bool() const

    noexcept { return _cols && _rows; }

//    Деструкторы в С++ вызываются при уничтожении объекта и позволяют освободить ресурсы, выделенные для этого объекта.
//    = 0 - это чисто виртуальная функция, которая не имеет своей собственной реализации в базовом классе.
    virtual ~MatrixBase() = 0;

protected:
    size_t _rows = 0, _cols = 0;
};

MatrixBase::~MatrixBase() {} // ничего не делает, не нужно вроде
